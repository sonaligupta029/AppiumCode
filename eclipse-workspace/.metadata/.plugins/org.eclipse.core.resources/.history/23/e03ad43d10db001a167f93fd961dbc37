package com.rapido.api.customer;

import static org.apache.commons.httpclient.HttpStatus.SC_OK;

import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import com.rapido.api.Groups;
import com.rapido.api.TestBase;
import com.rapido.api.customer.entities.Location;
import com.rapido.api.data.CaptainPool;
import com.rapido.api.data.Customer;
import com.rapido.api.db.DbHelper;
import com.rapido.api.endpoints.auth.AuthClient;
import com.rapido.api.endpoints.auth.login.LoginResponse;
import com.rapido.api.endpoints.auth.verify.VerifyOTPResponse;
import com.rapido.api.endpoints.captain.clients.CaptainClient;
import com.rapido.api.endpoints.customer.clients.CustomerClient;
import com.rapido.api.endpoints.customer.favouriteAddress.FavAddressDeleteResponse;
import com.rapido.api.endpoints.customer.favouriteAddress.FavAddressResponse;
import com.rapido.api.entities.RideLocation;
import com.rapido.api.utils.CustomerPool;
import com.rapido.api.utils.DataHelper;
import com.rapido.api.utils.RideHelper;

import io.qameta.allure.Description;
import io.qameta.allure.Story;

public class FavouriteTest extends TestBase{
    private CustomerClient customerClient;
    private CaptainClient captainClient;
    private CaptainPool captainPool;
    private CustomerPool customerPool;
    private RideHelper rideHelper;
    private  AuthClient authClient ;

    public FavouriteTest() {
        this.captainPool = new CaptainPool();
        this.customerPool = new CustomerPool();
        this.authClient= new AuthClient();
    }

    @BeforeClass(alwaysRun = true)
    public void abortExistingOrders() {
        DataHelper.abortExistingOrders(captainPool.getCaptainForLink_11().getMobile());
        DataHelper.abortExistingOrders(captainPool.getCaptainForLink_12().getMobile());
    }
    
    
	@Test(groups = { Groups.REGRESSION, Groups.ENTITIES }, enabled = true, priority = 14)
	@Description("Customer login and add/replace and delete home address as favourite")
	@Story("Customer should be able to modify home address as Favourite")
	public void verifyuserShouldBeAbleToModifyHomeAddressAsFavAddress() {

		Customer customer = new CustomerPool().getValidCustomer();
		customerClient = new CustomerClient(customer);
		Location pickupLocation = RideLocation.KORMANAGALA_POLIC_STN.getLocation();
		customer.setPickupLocationDetails(pickupLocation);

		LoginResponse customerLoginResponse = authClient.loginCustomer(customer);
		customer.setId(customerLoginResponse.getProfile().get_id());
		Assert.assertEquals(customerLoginResponse.getStatus(), SC_OK);
		String otp = DbHelper.getOtp(customer.getMobileNumber());
		VerifyOTPResponse verifyCustomerResponse = authClient.verifyOTP(customer, otp);
		Assert.assertEquals(verifyCustomerResponse.getStatus(), SC_OK);
		customer.setAccessToken(verifyCustomerResponse.getToken());

		// Add
		Location favHomeLocation = RideLocation.FAV_HOME.getLocation();
		FavAddressResponse responseHome = customerClient.addFavAddres(favHomeLocation,"20","Home", 0.0);
		Assert.assertEquals(responseHome.getStatus(), SC_OK);
		Assert.assertEquals(responseHome.getInfo().getMessage(), "Got addresses");
		String home_id = responseHome.getData().get_id();
		Assert.assertNotNull(home_id);

		// Replace
		Location favHomeReplaceLocation = RideLocation.FAV_HOME_REPLACE.getLocation();
		FavAddressResponse responseReplaceHome = customerClient.replaceFavAddresLocation(favHomeReplaceLocation,"10","Home", 0.3, home_id);
		Assert.assertEquals(responseReplaceHome.getStatus(), SC_OK);
		Assert.assertEquals(responseReplaceHome.getInfo().getMessage(), "Got addresses");
		String replaced_home_id = responseReplaceHome.getData().get_id();
		Assert.assertNotNull(replaced_home_id);

		// Delete
		FavAddressDeleteResponse responseDeleteHome = customerClient.deleteFavAddresLocation(favHomeReplaceLocation,"10", "Home", 0.3, replaced_home_id);
		Assert.assertEquals(responseDeleteHome.getInfo().getStatus(), "success");
		Assert.assertEquals(responseDeleteHome.getInfo().getMessage(), "Got addresses");

	}

	@Test(groups = { Groups.REGRESSION, Groups.ENTITIES }, enabled = true, priority = 15)
	@Description("Customer login and add/replace and delete work address as favourite")
	@Story("Customer should be able to modify work address as Favourite")
	public void verifyuserShouldBeAbleToModifyWorkAddressAsFavAddress() {

		Customer customer = new CustomerPool().getValidCustomer();
		customerClient = new CustomerClient(customer);
		Location pickupLocation = RideLocation.KORMANAGALA_POLIC_STN.getLocation();
		customer.setPickupLocationDetails(pickupLocation);

		LoginResponse customerLoginResponse = authClient.loginCustomer(customer);
		customer.setId(customerLoginResponse.getProfile().get_id());
		Assert.assertEquals(customerLoginResponse.getStatus(), SC_OK);
		String otp = DbHelper.getOtp(customer.getMobileNumber());
		VerifyOTPResponse verifyCustomerResponse = authClient.verifyOTP(customer, otp);
		Assert.assertEquals(verifyCustomerResponse.getStatus(), SC_OK);
		customer.setAccessToken(verifyCustomerResponse.getToken());

		// Add
		Location favWorkLocation = RideLocation.FAV_WORK.getLocation();
		FavAddressResponse responseWork = customerClient.addFavAddres(favWorkLocation,"10","Work", 0.01);
		Assert.assertEquals(responseWork.getStatus(), SC_OK);
		Assert.assertEquals(responseWork.getInfo().getMessage(),"Got addresses");
		String work_id = responseWork.getData().get_id();
		Assert.assertNotNull(work_id);

		// Replace
		Location favHomeReplaceLocation = RideLocation.FAV_WORK_REPLACE.getLocation();
		FavAddressResponse responseReplaceHome = customerClient.replaceFavAddresLocation(favHomeReplaceLocation, "20","Work", 0.3, work_id);
		Assert.assertEquals(responseReplaceHome.getStatus(), SC_OK);
		Assert.assertEquals(responseReplaceHome.getInfo().getMessage(),"Got addresses");
		String replaced_work_id = responseReplaceHome.getData().get_id();
		Assert.assertNotNull(replaced_work_id);

		// Delete
		FavAddressDeleteResponse responseDeleteWork = customerClient.deleteFavAddresLocation(favHomeReplaceLocation,"20", "Work", 0.3, replaced_work_id);
		Assert.assertEquals(responseDeleteWork.getInfo().getStatus(),"success");
		Assert.assertEquals(responseDeleteWork.getInfo().getMessage(),"Got addresses");

	}

	@Test(groups = { Groups.REGRESSION, Groups.ENTITIES }, enabled = true, priority = 16)
	@Description("Customer login and add/replace and delete work address as favourite")
	@Story("Customer should be able to modify other address as Favourite")
	public void verifyuserShouldBeAbleToModifyOtherAddressAsFavAddress() {

		Customer customer = new CustomerPool().getValidCustomer();
		customerClient = new CustomerClient(customer);
		Location pickupLocation = RideLocation.KORMANAGALA_POLIC_STN.getLocation();
		customer.setPickupLocationDetails(pickupLocation);

		LoginResponse customerLoginResponse = authClient.loginCustomer(customer);
		customer.setId(customerLoginResponse.getProfile().get_id());
		Assert.assertEquals(customerLoginResponse.getStatus(), SC_OK);
		String otp = DbHelper.getOtp(customer.getMobileNumber());
		VerifyOTPResponse verifyCustomerResponse = authClient.verifyOTP(customer, otp);
		Assert.assertEquals(verifyCustomerResponse.getStatus(), SC_OK);
		customer.setAccessToken(verifyCustomerResponse.getToken());

		// Add
		Location favOtherLocation = RideLocation.FAV_OTHER.getLocation();
		FavAddressResponse responseOther = customerClient.addFavAddres(favOtherLocation,"10","CCD",0.02);
		Assert.assertEquals(responseOther.getStatus(), SC_OK);
		Assert.assertEquals(responseOther.getInfo().getMessage(), "Got addresses");
		String other_id = responseOther.getData().get_id();
		Assert.assertNotNull(other_id);

		// Delete
		FavAddressDeleteResponse responseDeleteOther = customerClient.deleteFavAddresLocation(favOtherLocation,"10","CCD",0.02, other_id);
		Assert.assertEquals(responseDeleteOther.getInfo().getStatus(), "success");
		Assert.assertEquals(responseDeleteOther.getInfo().getMessage(), "Got addresses");

	}

}
